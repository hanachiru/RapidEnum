using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace RapidEnum;

[Generator]
public class RapidEnumGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        context.RegisterPostInitializationOutput(static postInitializationContext =>
        {
            postInitializationContext.AddSource("RapidEnumAttribute.g.cs", SourceText.From($$$"""
                // <auto-generated />
                
                using System;

                namespace {{{Constants.AttributeNameSpace}}}
                {
                    [AttributeUsage(AttributeTargets.Enum)]
                    public sealed class {{{Constants.AttributeName}}} : Attribute
                    {
                        
                    }
                    
                    [AttributeUsage(AttributeTargets.Class, Inherited = false)]
                    public sealed class {{{Constants.MarkerAttributeName}}} : Attribute
                    {
                        public Type Type { get; }
                        public {{{Constants.MarkerAttributeName}}}(Type type)
                        {
                            Type = type;
                        }
                    }
                }
                """, Encoding.UTF8));
        });
        
        var markerProvider = context.SyntaxProvider
            .ForAttributeWithMetadataName($"{Constants.AttributeNameSpace}.{Constants.MarkerAttributeName}",
                static (node, token) =>
                {
                    token.ThrowIfCancellationRequested();
                    return node is ClassDeclarationSyntax;
                },
                static (context, token) =>
                {
                    token.ThrowIfCancellationRequested();
                    var enumSymbol = context.Attributes
                        .FirstOrDefault(x => x?.AttributeClass?.Name == Constants.MarkerAttributeName)
                        ?.ConstructorArguments.FirstOrDefault().Value as INamedTypeSymbol;
                    return enumSymbol == null ? null : new RapidEnumGeneratorContext(enumSymbol);
                }).Where(x => x != null);

        context.RegisterSourceOutput(markerProvider, static (context, generationContext) =>
        {
            if (generationContext == null)
            {
                return;
            }

            var rendered = RenderStateMachine(generationContext);
            context.AddSource(generationContext.GeneratedFileName, rendered);
        });

        var provider = context.SyntaxProvider
            .ForAttributeWithMetadataName($"{Constants.AttributeNameSpace}.{Constants.AttributeName}",
                static (node, token) =>
                {
                    token.ThrowIfCancellationRequested();
                    return node is EnumDeclarationSyntax;
                },
                static (context, token) =>
                {
                    token.ThrowIfCancellationRequested();
                    if (context.TargetSymbol is not INamedTypeSymbol enumSymbol)
                    {
                        return null;
                    }

                    var generateStateMachineAttribute = context.Attributes
                        .FirstOrDefault(x => x.AttributeClass?.Name == Constants.AttributeName);
                    return generateStateMachineAttribute != null
                        ? new RapidEnumGeneratorContext(enumSymbol)
                        : null;
                })
            .Where(x => x != null);

        context.RegisterSourceOutput(provider, static (context, generationContext) =>
        {
            if (generationContext == null)
            {
                return;
            }

            var rendered = RenderStateMachine(generationContext);
            context.AddSource(generationContext.GeneratedFileName, rendered);
        });
    }

    private static string RenderStateMachine(RapidEnumGeneratorContext context)
    {
        return $$$"""
                  // <auto-generated />
                  
                  using System;
                  using System.Collections.Generic;
                  using System.Runtime.CompilerServices;
                  using System.Collections.ObjectModel;
                  
                  {{{(!string.IsNullOrEmpty(context.NameSpace) ?
                      $"namespace {context.NameSpace} \n{{" :
                      "")}}}
                      
                    public static partial class {{{context.ClassName}}}
                    {
                        [MethodImpl(MethodImplOptions.AggressiveInlining)]
                        public static string ToStringFast(this {{{context.EnumFullName}}} value)
                        {
                            return value switch
                            {
                                {{{
                                    string.Join("\n              ", context.EnumNames.Select(x => $"{x} => nameof({x}),"))
                                }}}
                                _ => value.ToString()
                            };
                        }
                        
                        [MethodImpl(MethodImplOptions.AggressiveInlining)]
                        public static bool IsDefined({{{context.EnumFullName}}} value)
                        {
                            return value switch
                            {
                                {{{
                                    string.Join("\n              ", context.EnumNames.Select(x => $"{x} => true,"))
                                }}}
                                _ => false,
                            };
                        }
                        
                        [MethodImpl(MethodImplOptions.AggressiveInlining)]
                        public static bool IsDefined(string name)
                        {
                            return name switch
                            {
                                {{{
                                    string.Join("\n              ", context.EnumNames.Select(x => $"nameof({x}) => true,"))
                                }}}
                                _ => false,
                            };
                        }
                        
                        private static readonly ReadOnlyCollection<{{{context.EnumFullName}}}> CacheValues = new[]
                        {
                            {{{
                                string.Join("\n          ", context.EnumNames.Select(x => $"{x},"))
                            }}}
                        }.AsReadOnly();
                        
                        [MethodImpl(MethodImplOptions.AggressiveInlining)]
                        public static IReadOnlyList<{{{context.EnumFullName}}}> GetValues() => CacheValues;
                    
                        private static readonly ReadOnlyCollection<string> CacheNames = new[]
                        {
                            {{{
                                string.Join("\n          ", context.EnumNames.Select(x => $"nameof({x}),"))
                            }}}
                        }.AsReadOnly();
                        
                        [MethodImpl(MethodImplOptions.AggressiveInlining)]
                        public static IReadOnlyList<string> GetNames() => CacheNames;
                        
                        [MethodImpl(MethodImplOptions.AggressiveInlining)]
                        public static bool TryParse(
                            string name,
                            out {{{context.EnumFullName}}} value,
                            bool ignoreCase = false)
                        {
                            return ignoreCase ? TryParseIgnoreCase(name, out value) : TryParse(name, out value);
                        }
                    
                        private static bool TryParseIgnoreCase(
                            string name,
                            out {{{context.EnumFullName}}} value)
                        {
                            switch (name)
                            {
                                {{{
                                    string.Join("\n              ", context.EnumNames.Select(x => $"case not null when name.Equals(nameof({x}), StringComparison.OrdinalIgnoreCase):\n                  value = {x};\n                  return true;"))
                                }}}
                                case not null when int.TryParse(name, out var val):
                                    value = ({{{context.EnumFullName}}})val;
                                    return true;
                                default:
                                    value = default;
                                    return false;
                            }
                        }
                    
                        private static bool TryParse(
                            string name,
                            out {{{context.EnumFullName}}} value)
                        {
                            switch (name)
                            {
                                {{{
                                    string.Join("\n              ", context.EnumNames.Select(x => $"case nameof({x}):\n                   value = {x};\n                  return true;"))
                                }}}
                                case not null when int.TryParse(name, out var val):
                                    value = ({{{context.EnumFullName}}})val;
                                    return true;
                                default:
                                    value = default;
                                    return false;
                            }
                        }
                        
                        private static readonly Type CacheUnderlyingType = Enum.GetUnderlyingType(typeof({{{context.EnumFullName}}}));
                        public static Type GetUnderlyingType() => CacheUnderlyingType;
                    }
                  {{{(!string.IsNullOrEmpty(context.NameSpace) ? "}" : "")}}}
                  """;
    }
}